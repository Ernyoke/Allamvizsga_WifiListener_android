package com.sapientia.wifilistener;

import java.util.ArrayList;

import com.sapientia.wifilistener.R;
import android.content.Intent;
import android.os.Bundle;
import android.support.v4.app.ActionBarDrawerToggle;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentManager;
import android.support.v4.widget.DrawerLayout;
import android.support.v7.app.ActionBarActivity;
import android.util.Log;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.AdapterView;
import android.widget.Button;
import android.widget.ListView;
import android.widget.TextView;

import com.sapientia.wifilistener.ReceiveService.STATE;
import com.sapientia.wifilistener.navigationdrawer.AddNewChannelFragment;
import com.sapientia.wifilistener.navigationdrawer.ChannelFragment;
import com.sapientia.wifilistener.navigationdrawer.DrawerListAdaper;
import com.sapientia.wifilistener.navigationdrawer.MainFragment;
import com.sapientia.wifilistener.navigationdrawer.NavDrawerChannel;
import com.sapientia.wifilistener.navigationdrawer.NavDrawerItem;


public class MainActivity extends ActionBarActivity implements InitApplication {

	private static final int RESULT_SETTINGS = 1;

	private DrawerLayout mDrawerLayout;
	private ListView mDrawerList;
	private ActionBarDrawerToggle mDrawerToggle;
	private DrawerListAdaper adapter;
	private HandleServices handleServices = null;
	
	private Fragment fragment = null;
	
	private ArrayList<NavDrawerItem> autoGenerated;
	
	int clientId = 0;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);
		
		mDrawerLayout = (DrawerLayout) findViewById(R.id.drawer_layout);
		mDrawerList = (ListView) findViewById(R.id.list_slidermenu);

		mDrawerList.setOnItemClickListener(new SlideMenuClickListener());
		
		//initialize navigation lists
		this.initializeNavDrawerLists();

		// setting the nav drawer list adapter
		adapter = new DrawerListAdaper(getApplicationContext());
		adapter.setAutogeneratedList(autoGenerated);
		
		//set the adapter
		mDrawerList.setAdapter(adapter);
		
		//generate list
		this.generateNavDrawerList();

		// enabling action bar app icon and behaving it as toggle button
		getActionBar().setDisplayHomeAsUpEnabled(true);
		getActionBar().setHomeButtonEnabled(true);

		mDrawerToggle = new ActionBarDrawerToggle(this, mDrawerLayout,
				R.drawable.ic_drawer, // nav menu toggle icon
				R.string.app_name, // nav drawer open - description for
									// accessibility
				R.string.app_name // nav drawer close - description for
									// accessibility
		) {
			public void onDrawerClosed(View view) {
				getActionBar().setTitle("asd");
				// calling onPrepareOptionsMenu() to show action bar icons
				invalidateOptionsMenu();
			}

			public void onDrawerOpened(View drawerView) {
				getActionBar().setTitle("www");
				// calling onPrepareOptionsMenu() to hide action bar icons
				invalidateOptionsMenu();
			}
		};
		mDrawerLayout.setDrawerListener(mDrawerToggle);

//		if (savedInstanceState == null) {
//			// on first time display view for first nav item
//			displayView(-1);
//		}
		

	}
	
	private void initializeNavDrawerLists() {
		this.autoGenerated = new ArrayList<NavDrawerItem>();
	}
	
	private void generateNavDrawerList() {
		NavDrawerItem addNewChannel = new NavDrawerItem("Add new channel", handleServices);
		NavDrawerItem refresh = new NavDrawerItem("Refresh List", handleServices);
		NavDrawerItem exit = new NavDrawerItem("Exit", handleServices);
		autoGenerated.add(addNewChannel);
		autoGenerated.add(refresh);
		autoGenerated.add(exit);
	}

	@Override
	public void onResume() {
		super.onResume();
		if(handleServices == null) {
			handleServices = new HandleServices(this.getApplicationContext(), this);
		}
		handleServices.startServices();
	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// Inflate the menu; this adds items to the action bar if it is present.
		
		getMenuInflater().inflate(R.menu.main, menu);
		return true;
	}

	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		if (mDrawerToggle.onOptionsItemSelected(item)) {
			return true;
		}
		int id = item.getItemId();
		if (id == R.id.action_settings) {
			Intent i = new Intent(this, SettingsActivity.class);
			startActivityForResult(i, RESULT_SETTINGS);
			return true;
		}
		return super.onOptionsItemSelected(item);
	}
	
	@Override
	public boolean onPrepareOptionsMenu(Menu menu) {
		// if nav drawer is opened, hide the action items
		boolean drawerOpen = mDrawerLayout.isDrawerOpen(mDrawerList);
		menu.findItem(R.id.action_settings).setVisible(!drawerOpen);
		return super.onPrepareOptionsMenu(menu);
	}

	@Override
	public void onPause() {
		super.onStop();
		handleServices.distroy();
	}

	private void displayView(int position) {
		// update the main content by replacing fragments
		if(position >= 0) {
			NavDrawerItem item = (NavDrawerItem) adapter.getItem(position);
			if(item instanceof NavDrawerChannel) {
				NavDrawerChannel channel = (NavDrawerChannel) item;
				ChannelFragment chFragment = (ChannelFragment) channel.getFragment();
				chFragment.setChannel(channel);
				chFragment.setServiceHandler(handleServices);
				fragment = chFragment;
			}
			else {
				fragment = new AddNewChannelFragment(adapter, handleServices);
			}
			
		}
		else {
			MainFragment mainFragment = new MainFragment();
			mainFragment.setServiceHandler(handleServices);
			fragment = mainFragment;
		}

		if (fragment != null) {
			FragmentManager fragmentManager = this.getSupportFragmentManager();
			fragmentManager.beginTransaction()
					.replace(R.id.frame_container, fragment).commit();

			// update selected item and title, then close the drawer
			mDrawerList.setItemChecked(position, true);
			mDrawerList.setSelection(position);
			setTitle("eee");
			mDrawerLayout.closeDrawer(mDrawerList);
		} 
		else {
			// error in creating fragment
			Log.e("MainActivity", "Error in creating fragment");
		}
	}

	private class SlideMenuClickListener implements
			ListView.OnItemClickListener {
		@Override
		public void onItemClick(AdapterView<?> parent, View view, int position,
				long id) {
			// display view for selected nav drawer item
			displayView(position);
		}
	}

	@Override
	public void showFragment(int pos) {
		displayView(pos);
	}

	@Override
	public void initNavDrawerModel(ArrayList<NavDrawerItem> fromServer,
			ArrayList<NavDrawerItem> fromUser) {
		adapter.setFromServerList(fromServer);
		adapter.setFromUserList(fromUser);
	}

}
